
-- start out with the ususal definitions
data Unit : * {
  | tt  : Unit
};

data Bool : * {
  | true  : Bool
  | false : Bool
};

data Nat : * {
  | Z : Nat
  | S : Nat -> Nat
};

add : Nat -> Nat -> Nat ;
add x y = 
  case x <_ => Nat> {
   | (Z)   => y
   | (S p) => S (add p y)
   } ;

-- there is some magic syntactic sugar for S, Z

-- ! will let you evaluate (hove mouse over)
! add 1 2;


--this laguage will only warn if there is a potential type mismatch

test : Bool ;
test = 1 ;

-- when you run the program you get a witness of the error on the origional warning

--! test; -- uncomment me!


-- more involved example

-- length indexed lists
data Vec : * -> Nat -> * {
  | Nil  : (A : *) -> Vec A 0
  | Cons : (A : *) -> A -> (n : Nat) -> Vec A n -> Vec A (S n)
};


head : (A : *) -> (n : Nat) -> Vec A (S n) -> A ;
head A n v = 
  case v <_ => A >{
   | (Cons _ a _ _) => a
   } ;

tail : (A : *) -> (n : Nat) -> Vec A (S n) -> Vec A n ;
tail A n v = 
  case v <_ => Vec A n >{
   | (Cons _ _ _ v) => v
   } ;

append : (A : *) -> (n : Nat) -> Vec A n -> (m : Nat) -> Vec A m -> Vec A (add n m) ;
append A n vn m vm = 
  case n, vn < n' => _ : Vec A n' => Vec A (add n' m) >{ -- multi matching allows for definitional computation
   | (Z)   => (Nil _) => vm
   | (S _) => (Cons _ a pn pvn) => Cons A a (add pn m) (append A pn pvn m vm)
  };


rep : (A : *) -> A -> (n : Nat) -> Vec A n ;
rep A a n = 
  case n < n' : Nat => Vec A n' >{
   | (Z)   => Nil A
   | (S p) => Cons A a p (rep A a p)
   } ;



okFun : Nat -> Bool ;
okFun x = head Bool x (rep Bool true (add x 1)) ;

-- ok function still evaluates even though the equality is not verified
! okFun 2;
! okFun 4;

-- bad addition
badd : Nat -> Nat -> Nat ;
badd x y = 
  case x {
   | (Z)   => y
   | (S (Z)) => 0 -- incorrect exactly when x = 1
   | (S (S (Z))) => S (S y)
   | (S p) => S (add p y) -- TODO clean up
   } ;

almostFun : Nat -> Bool ;
almostFun x = head Bool x (rep Bool true (badd x 1)) ;

! almostFun 0;
-- ! almostFun 1;  -- uncomment me!
! almostFun 2;
